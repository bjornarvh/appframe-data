function fireCallback(a){if("function"==typeof a){for(var b=arguments.length,c=Array(1<b?b-1:0),d=1;d<b;d++)c[d-1]=arguments[d];a(...c)}}class DataHandler{constructor(a){const b=a.articleId,c=a.dataSourceId,d=a.fields,e=a.groupBy,f=a.timeout;b?this.articleId=b:window.af&&window.af.article&&(this.articleId=window.af.article.id),this.dataSourceId=c||null,this.fields=d||null,this.groupBy=e||null,this.timeout=f||3e4}create(a,b){return this.request("create",a,b)}destroy(a,b){return this.request("destroy",a,b)}retrieve(a,b){return this.request("retrieve",a,b)}update(a,b){return this.request("update",a,b)}request(a,b,c){return new Promise((d,e)=>{const f={body:JSON.stringify(b),method:"POST",headers:{"Content-Type":"application/json; charset=utf-8"}};let g=null,h=`/${a}/${this.articleId}/${this.dataSourceId}`,i=!1;this.fields&&(h+=`/${this.fields instanceof Array?this.fields.join("-"):this.fields}`),this.groupBy&&(h+="/"+this.groupBy),window.AbortController&&(this.previousRequestController&&this.previousRequestController.abort(),g=new window.AbortController,this.previousRequestController=g,f.signal=this.previousRequestController.signal);const j=setTimeout(()=>{g&&g.abort(),i=!0,d(!1)},this.timeout);fetch(h,f).then(a=>(clearTimeout(j),!(i||g&&this.previousRequestController!==g)&&a.json())).then(a=>{!1===a?d(!1):a.hasOwnProperty("success")?(fireCallback(c,null,a.success),d(a.success)):a.hasOwnProperty("error")&&(fireCallback(c,null,a.error),e(a.error))}).catch(a=>{"Aborted"===a.message||window.AbortError&&a instanceof window.AbortError?d(!1):e(a)})})}}export default DataHandler;
